import asyncio
import math
import random
from datetime import datetime
from enum import Enum

import discord

from Database.Models.node import Node
from Database.Models.user import User
from constants import timeout, images


class MalwareType(Enum):
    VIRUS = "virus"
    TROJAN = "trojan"
    WORM = "worm"


async def set_malware(malware: MalwareType, user: User, channel: discord.TextChannel):
    # check if there's already content in the node
    if user.where.content != {}:
        await channel.send("You can't set malware here! Clear the area first!")
        return

    # check if user has already set malware, if so, check if the timeout has passed
    # set malware last created at for user
    if malware == MalwareType.VIRUS:
        if user.virus_last_created_at is not None:
            left_until_timeout = timeout - (datetime.utcnow().timestamp() - user.virus_last_created_at)
            if left_until_timeout > 0:
                await channel.send("You can't set a virus yet! You have to wait " + str(math.floor(left_until_timeout)) + " seconds.")
                return
        user.virus_last_created_at = datetime.utcnow().timestamp()

    elif malware == MalwareType.TROJAN:
        if user.trojan_last_created_at is not None:
            left_until_timeout = timeout - (datetime.utcnow().timestamp() - user.trojan_last_created_at)
            if left_until_timeout > 0:
                await channel.send("You can't set a trojan yet! You have to wait " + str(math.floor(left_until_timeout)) + " seconds.")
                return
        user.trojan_last_created_at = datetime.utcnow().timestamp()

    elif malware == MalwareType.WORM:
        if user.worm_last_created_at is not None:
            left_until_timeout = timeout - (datetime.utcnow().timestamp() - user.worm_last_created_at)
            if left_until_timeout > 0:
                await channel.send("You can't set a worm yet! You have to wait " + str(math.floor(left_until_timeout)) + " seconds.")
                return
        user.worm_last_created_at = datetime.utcnow().timestamp()

    await user.save()

    # print malware in channel & feedback user that is has been set, show the timeout
    embed = get_malware_embed(malware, user)
    await channel.send(f"Malware has been set for {timeout} seconds.", embed=embed)


    # add malware json (type, owner) to content in node
    node = user.where
    node.content = {
        "malware": {
            "type": malware.value,
            "owner": user.discord_id,
            "created_at": datetime.utcnow().timestamp(),
        }
    }
    await node.save()

    # debug
    this_node = await Node.get(id=node.id)
    print(this_node.content)

    # after timeout, remove malware json from content in node, check if it is still the same owner
    await asyncio.sleep(timeout)
    node = await Node.get(id=node.id)
    if node.content["malware"]["owner"] == user.discord_id:
        node.content = {}
        await node.save()

        # print malware has been removed in channel & feedback user that is has been removed
        await channel.send(f"Malware has been removed after {timeout} seconds.")


def get_malware_embed(malware: MalwareType, user: User):
    embed = None
    if malware == MalwareType.VIRUS:
        embed = discord.Embed(title=f"\U0001f9a0 {malware.value.title()} \U0001f9a0")
        embed.add_field(name="", value=f"_...{random.choice(virus_description)}..._", inline=True)
    elif malware == MalwareType.TROJAN:
        embed = discord.Embed(title=f"\U0001f434 {malware.value.title()} \U0001f434")
        embed.add_field(name="", value=f"_...{random.choice(trojan_description)}..._", inline=True)
    elif malware == MalwareType.WORM:
        embed = discord.Embed(title=f"\U0001fab1 {malware.value.title()} \U0001fab1")
        embed.add_field(name="", value=f"_...{random.choice(worm_description)}..._", inline=True)

    image = ""
    if malware == MalwareType.VIRUS:
        image = images["virus"]
    elif malware == MalwareType.TROJAN:
        image = images["trojan"]
    elif malware == MalwareType.WORM:
        image = images["worm"]
    embed.set_thumbnail(url=image)

    embed.add_field(name="", value=f"Malware deployed by <@{user.discord_id}>", inline=False)

    return embed


virus_description = [
    "The virus was like a rogue wave in an ocean of data, disrupting the normal flow of information and causing chaos within the system",
    "Its tendrils spread deep into the core, infecting files and programs with its malicious code",
    "The system struggled against the infection, sending out error messages and slowing down as it tried to defend itself",
    "But the virus was relentless, replicating and evolving with each passing moment",
    "It was a digital monster, tearing apart the very fabric of the system and leaving a trail of destruction in its wake",
]

worm_description = [
    "The worm slithered its way through the network, leaving a trail of destruction in its wake",
    "It was a silent invader, infiltrating systems unnoticed and burrowing deep into their inner workings",
    "It replicated rapidly, spreading from one computer to the next like a virus, consuming resources and slowing down performance",
    "The worm was intelligent, adapting to the changing environment and evading detection",
    "It was a malicious entity, designed to wreak havoc and disrupt the normal functioning of the network",
    "And as it continued its rampant spread, it seemed as though nothing could stop its march of destruction",

]

trojan_description = [
    "The trojan was disguised as a harmless program, but it was actually a sinister agent of chaos",
    "Once downloaded, it hid itself within the system, waiting for the right moment to strike",
    "When the time was right, it unleashed its malicious payload, giving attackers control over the infected machine",
    "The trojan was cunning, manipulating the system and disguising its activity to evade detection",
    "It was a master of disguise, able to blend in and operate unnoticed while it worked to carry out its mission",
    "And as it infiltrated deeper into the network, the damage it caused grew, until the entire system was threatened by its presence",
]