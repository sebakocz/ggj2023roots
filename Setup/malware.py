import asyncio
import math
from datetime import datetime
from enum import Enum

import discord

from Database.Models.node import Node
from Database.Models.user import User
from constants import timeout


class MalwareType(Enum):
    VIRUS = "virus"
    TROJAN = "trojan"
    WORM = "worm"


async def set_malware(malware: MalwareType, user: User, channel: discord.TextChannel):
    # check if there's already content in the node
    if user.where.content != {}:
        await channel.send("You can't set malware here! Clear the area first!")
        return

    # check if user has already set malware, if so, check if the timeout has passed
    # set malware last created at for user
    if malware == MalwareType.VIRUS:
        if user.virus_last_created_at is not None:
            left_until_timeout = timeout - (datetime.utcnow().timestamp() - user.virus_last_created_at)
            if left_until_timeout > 0:
                await channel.send("You can't set a virus yet! You have to wait " + str(math.floor(left_until_timeout)) + " seconds.")
                return
        user.virus_last_created_at = datetime.utcnow().timestamp()

    elif malware == MalwareType.TROJAN:
        if user.trojan_last_created_at is not None:
            left_until_timeout = timeout - (datetime.utcnow().timestamp() - user.trojan_last_created_at)
            if left_until_timeout > 0:
                await channel.send("You can't set a trojan yet! You have to wait " + str(math.floor(left_until_timeout)) + " seconds.")
                return
        user.trojan_last_created_at = datetime.utcnow().timestamp()

    elif malware == MalwareType.WORM:
        if user.worm_last_created_at is not None:
            left_until_timeout = timeout - (datetime.utcnow().timestamp() - user.worm_last_created_at)
            if left_until_timeout > 0:
                await channel.send("You can't set a worm yet! You have to wait " + str(math.floor(left_until_timeout)) + " seconds.")
                return
        user.worm_last_created_at = datetime.utcnow().timestamp()

    await user.save()

    # print malware in channel & feedback user that is has been set, show the timeout
    embed = get_malware_embed(malware)
    await channel.send(f"Malware has been set for {timeout} seconds.", embed=embed)


    # add malware json (type, owner) to content in node
    node = user.where
    node.content = {
        "malware": {
            "type": malware.value,
            "owner": user.discord_id,
            "created_at": datetime.utcnow().timestamp(),
        }
    }
    await node.save()

    # after timeout, remove malware json from content in node, check if it is still the same owner
    await asyncio.sleep(timeout)
    node = await Node.get(id=node.id)
    if node.content["malware"]["owner"] == user.discord_id:
        node.content = {}
        await node.save()

        # print malware has been removed in channel & feedback user that is has been removed
        await channel.send(f"Malware has been removed after {timeout} seconds.")


def get_malware_embed(malware: MalwareType):
    embed = discord.Embed(title=f">set {malware.value}")
    if malware == MalwareType.VIRUS:
        embed.add_field(name="Virus", value="A virus is a program that can copy itself and infect a computer without permission.", inline=True)
    elif malware == MalwareType.TROJAN:
        embed.add_field(name="Trojan", value="A Trojan is a program that appears harmless but is actually malicious.", inline=True)
    elif malware == MalwareType.WORM:
        embed.add_field(name="Worm", value="A worm is a program that can copy itself and spread from one computer to another without permission.", inline=True)
    return embed